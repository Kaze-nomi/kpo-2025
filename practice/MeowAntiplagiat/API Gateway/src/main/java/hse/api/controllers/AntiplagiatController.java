package hse.api.controllers;

import com.google.protobuf.ByteString;
import hse.api.grpc.FileStorageServiceGrpc.FileStorageServiceBlockingStub;
import hse.api.grpc.AnalyzeFileRequest;
import hse.api.grpc.AnalyzeFileResponse;
import hse.api.grpc.FileAnalysisServiceGrpc;
import hse.api.grpc.FileAnalysisServiceGrpc.FileAnalysisServiceBlockingStub;
import hse.api.grpc.FileStorageServiceGrpc;
import hse.api.grpc.GetFileRequest;
import hse.api.grpc.GetFileResponse;
import hse.api.grpc.UploadFileRequest;
import hse.api.grpc.UploadFileResponse;
import hse.api.grpc.WordCloudResponse;
import io.grpc.StatusRuntimeException;
import io.grpc.ConnectivityState;
import io.grpc.ManagedChannel;
import io.grpc.Status;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import net.devh.boot.grpc.client.inject.GrpcClient;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Objects;

@RestController
@RequestMapping("/antiplagiat")
@RequiredArgsConstructor
@Tag(name = "–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç", description = "–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏")
public class AntiplagiatController {

    @GrpcClient("file-storing-service")
    private FileStorageServiceBlockingStub fileStorageClient;

    @GrpcClient("file-analysis-service")
    private FileAnalysisServiceBlockingStub fileAnalysisClient;

    @Scheduled(fixedRate = 5000)
    private void checkConnections() {
        tryReconnect(fileStorageClient.getChannel());
        tryReconnect(fileAnalysisClient.getChannel());
    }

    private <T> void tryReconnect(T channel) {
        ManagedChannel c = (ManagedChannel) channel;
        if (c.getState(true) != ConnectivityState.READY) {
            c.resetConnectBackoff();
            c.enterIdle();

            if (channel == fileStorageClient.getChannel()) {
                fileStorageClient = FileStorageServiceGrpc.newBlockingStub(fileStorageClient.getChannel());

            }

            if (channel == fileAnalysisClient.getChannel()) {
                fileAnalysisClient = FileAnalysisServiceGrpc.newBlockingStub(fileAnalysisClient.getChannel());
            }
        }
    }

    @PostMapping(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @Operation(summary = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", description = "–ó–∞–≥—Ä—É–∑–∫–∞ .txt —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç", requestBody = @RequestBody(content = @Content(mediaType = MediaType.MULTIPART_FORM_DATA_VALUE, schema = @Schema(implementation = FileUploadSchema.class))))
    public ResponseEntity<String> uploadFile(
            @Parameter(description = "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", required = true, content = @Content(mediaType = MediaType.APPLICATION_OCTET_STREAM_VALUE)) @RequestParam("file") MultipartFile file) {

        if (!Objects.requireNonNull(file.getOriginalFilename()).toLowerCase().endsWith(".txt")) {
            return ResponseEntity.badRequest().body("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã");
        }

        if (file.isEmpty()) {
            return ResponseEntity.badRequest().body("–§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        }

        try {
            UploadFileRequest request = UploadFileRequest.newBuilder()
                    .setFileName(file.getOriginalFilename())
                    .setFileContent(ByteString.copyFrom(file.getBytes()))
                    .build();

            UploadFileResponse response = fileStorageClient.uploadFile(request);
            return ResponseEntity.ok(response.getFileId());

        } catch (StatusRuntimeException e) {
            if (e.getStatus().getCode() == Status.Code.UNAVAILABLE) {
                return ResponseEntity.status(503)
                        .body("–°–µ—Ä–≤–∏—Å storage —Å–µ–π—á–∞—Å —Å–ø–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üí§");
            }
            return ResponseEntity.internalServerError()
                    .body("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å storage: " + e.getMessage());
        } catch (IOException e) {
            return ResponseEntity.internalServerError()
                    .body("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    @GetMapping("/storing/{id}")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
    public ResponseEntity<String> getFileContent(@PathVariable String id) {
        try {
            GetFileResponse response = fileStorageClient.getFile(GetFileRequest.newBuilder().setFileId(id).build());
            return ResponseEntity.ok("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:" + "\n" + response.getFileContent().toStringUtf8());
        } catch (StatusRuntimeException e) {
            if (e.getStatus().getCode() == Status.Code.UNAVAILABLE) {
                return ResponseEntity.status(503)
                        .body("–°–µ—Ä–≤–∏—Å storage —Å–µ–π—á–∞—Å —Å–ø–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üí§");
            }
            return ResponseEntity.internalServerError().body("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    @GetMapping("/analysis/{id}")
    @Operation(summary = "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞")
    public ResponseEntity<String> getFileAnalysis(@PathVariable String id) {
        try {
            AnalyzeFileResponse response = fileAnalysisClient
                    .analyzeFile(AnalyzeFileRequest.newBuilder().setFileId(id).build());
            return ResponseEntity.ok("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:" + "\n" + response.getAnalysisResult());
        } catch (StatusRuntimeException e) {
            if (e.getStatus().getCode() == Status.Code.UNAVAILABLE) {
                return ResponseEntity.status(503)
                        .body("–°–µ—Ä–≤–∏—Å analysis —Å–µ–π—á–∞—Å —Å–ø–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üí§");
            }
            return ResponseEntity.internalServerError().body("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: " + e.getMessage());
        }
    }

    @GetMapping("/analysis/wordcloud/{fileId}")
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤")
    public ResponseEntity<?> getWordCloudImage(@PathVariable String fileId) {
        try {
            WordCloudResponse response = fileAnalysisClient.getWordCloud(
                    AnalyzeFileRequest.newBuilder().setFileId(fileId).build());

            return ResponseEntity.ok()
                    .contentType(MediaType.IMAGE_PNG)
                    .body(response.getWordCloud().toByteArray());

        } catch (StatusRuntimeException e) {
            String errorMessage;
            HttpStatus status;

            if (e.getStatus().getCode() == Status.Code.UNAVAILABLE) {
                errorMessage = "–°–µ—Ä–≤–∏—Å analysis —Å–µ–π—á–∞—Å —Å–ø–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üí§";
                status = HttpStatus.SERVICE_UNAVAILABLE;
            } else {
                errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤: " + e.getMessage();
                status = HttpStatus.INTERNAL_SERVER_ERROR;
            }

            return ResponseEntity.status(status)
                    .contentType(MediaType.TEXT_PLAIN)
                    .body(errorMessage.getBytes(StandardCharsets.UTF_8));
        }
    }

    @Schema(name = "FileUploadSchema")
    static class FileUploadSchema {
        @Schema(format = "binary", description = "–§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        public String file;
    }
}